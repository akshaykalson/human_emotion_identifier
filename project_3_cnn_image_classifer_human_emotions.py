# -*- coding: utf-8 -*-
"""Project_3_CNN Image classifer_human_emotions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hgREOYiCikH47uhb1haDsxIrVDdi_D3N
"""

# !pip cache purge
!pip install tensorflow
# !pip uninstall tensorflow tensorflow-gpu

from google.colab import drive
drive.mount('/content/drive')

from matplotlib import pyplot as plt
import cv2
import imghdr
import numpy as np

# !pip install tensorflow-gpu

# !pip list
import tensorflow as tf
import os
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
# Avoid OOM errors by setting GPU Memory Consumption Growth

# gpus = tf.config.experimental.list_physical_devices('GPU')
# for gpu in gpus:
#     tf.config.experimental.set_memory_growth(gpu, True)
# tf.config.list_physical_devices('GPU')

data_dir = '/content/drive/MyDrive/Colab Notebooks/Datasets/Emotion Tracker'

os.listdir(data_dir) #this returns the directories that are available under data_dir directory

image_exts = ['jpeg','jpg', 'bmp', 'png']

for image_class in os.listdir(data_dir):
    for image in os.listdir(os.path.join(data_dir, image_class)):
        image_path = os.path.join(data_dir, image_class, image)
        try:
            img = cv2.imread(image_path)
            tip = imghdr.what(image_path)
            if tip not in image_exts:
                print('Image not in ext list {}'.format(image_path))
                os.remove(image_path)
        except Exception as e:
            print('Issue with image {}'.format(image_path))
            # os.remove(image_path)

for image_class in os.listdir(data_dir):
  print(image_class)
  #prints out the classes of images that we have

for image_class in os.listdir(data_dir):
    for image in os.listdir(os.path.join(data_dir, image_class)):
      print(image)

img1 = cv2.imread(os.path.join('/content/drive/MyDrive/Colab Notebooks/Datasets/Emotion Tracker','happy', 'happy-person.jpeg'))
img1.shape

plt.imshow(cv2.cvtColor(img1, cv2.COLOR_BGR2RGB))
plt.show()
#using this code we can see the image that exists in our dataset

data = tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/Colab Notebooks/Datasets/Emotion Tracker')

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()

batch[0]
#these are images represented as numpy arrays
#batch[1] stores the labels of each image

fig, ax = plt.subplots(ncols=4, figsize=(20,20))
for idx, img in enumerate(batch[0][:4]):
    ax[idx].imshow(img.astype(int))
    ax[idx].title.set_text(batch[1][idx])

data = data.map(lambda x,y: (x/255, y))

data.as_numpy_iterator().next()

len(data)

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)+1
test_size = int(len(data)*.1)+1

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

model = Sequential()

model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
#these relu functions and other functions of similar types are used to keep our output in control , it reduces the possibility of very large
#or very small values coming in our model
model.add(MaxPooling2D())
#maxpool layer reduces the image data by half , just takes max value out of 2,2 pixel structure
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.summary()

logdir='logs'

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)
#helps us collect data about efficiency of our model

hist = model.fit(train, epochs=20, validation_data=val, callbacks=[tensorboard_callback])

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre = Precision()
re = Recall()
acc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
    X, y = batch
    yhat = model.predict(X)
    pre.update_state(y, yhat)
    re.update_state(y, yhat)
    acc.update_state(y, yhat)

print(acc.result().numpy())

from tensorflow.keras.models import load_model

new_model = load_model(os.path.join('/content/drive/MyDrive/Colab Notebooks/Models','happysadmodel.h5'))

img = cv2.imread(os.path.join('/content/drive/MyDrive/Colab Notebooks/Datasets/Emotion Tracker','happy', 'happytest.jpg'))
# img.shape
plt.imshow(img)
plt.show()

resize = tf.image.resize(img, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

yhat = new_model.predict(np.expand_dims(resize/255, 0))

yhat

if yhat > 0.5:
    print(f'Predicted class is Sad')
else:
    print(f'Predicted class is Happy')

# model.save(os.path.join('/content/drive/MyDrive/Colab Notebooks/Models','happysadmodel.h5'))

# new_model = load_model(os.path.join('/content/drive/MyDrive/Colab Notebooks/Models','happysadmodel.h5'))

"""model.save(os.path.join('models','imageclassifier.h5'))

"""